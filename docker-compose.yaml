version: "3.9"
services:
  frontend:
    build: ./ui
    container_name: gneiss_frontend
    ports:
      - "3333:3000"
    environment:
      WATCHPACK_POLLING: "true"
    volumes:
      - ./ui:/app
      - /app/node_modules

  backend-rest:
    build: ./api
    container_name: gneiss_backend_rest
    ports:
      - "5555:3000"
    depends_on:
      - database
    volumes:
      - ./api:/app
      - /app/node_modules

  backend-graphql:
    image: hasura/graphql-engine:v2.24.1
    container_name: gneiss_backend_graphql
    ports:
      - "8080:8080"
    depends_on:
      - database
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://gneiss_user:gneiss_password@database:5432/gneiss_db
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://gneiss_user:gneiss_password@database:5432/gneiss_db
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS512", "key": "3EK6FD+o0+c7tzBNVfjpMkNDi2yARAAKzQlk8O2IKoxQu4nF7EdAh8s3TwpHwrdWT6R"}'
      HASURA_GRAPHQL_ADMIN_SECRET: adminsecret
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous

  database:
    build: ./db
    container_name: gneiss_database
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: gneiss_user
      POSTGRES_PASSWORD: gneiss_password
      POSTGRES_DB: gneiss_db
    volumes:
      - ./db/data:/var/lib/postgresql/data
      - ./db/postgresql.conf:/etc/postgresql/postgresql.config
    command:
      - -c
      - shared_preload_libraries=pg_stat_statements
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gneiss_user"]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: gneiss_adminer
    ports:
      - "8888:8080"
    depends_on:
      - database

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./devops/prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    depends_on:
      - database

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
